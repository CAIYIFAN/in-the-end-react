{"ast":null,"code":"import * as PIXI from 'pixi';\nimport { TweenMax, TimelineMax } from 'gsap/TweenMax';\nimport AlloyTouch from 'alloytouch';\n\nclass LongTake {\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 初始化\n  // ────────────────────────────────────────────────────────────────────────────────\n  constructor(options) {\n    // 库\n    this.lib = {\n      PIXI,\n      TweenMax,\n      TimelineMax,\n      AlloyTouch\n    }; // 事件监听\n\n    this.callbacks = {\n      loadProgress: []\n    }; // 参数\n\n    this.options = options;\n    this.container = options.container || document.body; // 场景容器\n\n    this.width = options.width || window.innerWidth; // 场景宽\n\n    this.height = options.height || window.innerHeight; // 场景高\n\n    this.resource = options.resource || {\n      sprites: []\n    }; // 要加载的资源\n\n    this.spritesAnimations = this.options.spritesAnimations || {}; // 精灵动画集合\n\n    this.textsAnimations = this.options.textsAnimations || {}; // 文本动画集合\n\n    this.autoLoad = typeof options.autoLoad === 'undefined' ? true : options.autoLoad; // 自动加载\n    // 精灵图集合\n\n    this.sprites = {}; // 文本集合\n\n    this.texts = {}; // 动画定时器\n\n    this.aniIntervals = []; // 创建场景\n\n    this.app = new PIXI.Application({\n      resolution: 2,\n      transparent: true,\n      width: this.width,\n      height: this.height\n    }); // 加入场景\n\n    this.container.appendChild(this.app.view); // 开始加载\n\n    if (this.autoLoad) this.load();\n  }\n\n  destroy() {\n    this.aniIntervals.forEach(interval => {\n      clearInterval(interval);\n    });\n    this.app.destroy(true);\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 加载\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  load() {\n    PIXI.loader.add(this.resource.sprites).on('progress', this.loadProgress.bind(this)).load(this.loadDone.bind(this));\n  }\n\n  loadProgress(loader) {\n    this.trigger('loadProgress', loader.progress);\n  }\n\n  loadDone() {\n    this.initBg();\n    this.initTexts();\n    this.initSprites();\n    this.initTimeline();\n    this.initTouch();\n    this.trigger('loadDone');\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 事件\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  on(name, callback) {\n    this.callbacks[name] = this.callbacks[name] || [];\n    this.callbacks[name].push(callback);\n  }\n\n  off(name, callback) {\n    const callbacks = this.callbacks[name];\n\n    if (callbacks && callbacks instanceof Array) {\n      const index = callbacks.indexOf(callback);\n      if (index !== -1) callbacks.splice(index, 1);\n    }\n  }\n\n  trigger(name, params) {\n    const callbacks = this.callbacks[name];\n\n    if (callbacks && callbacks instanceof Array) {\n      callbacks.forEach(cb => {\n        cb(params);\n      });\n    }\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 背景相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  // initBg () {\n  //   // 创建背景\n  //   this.bg = new PIXI.Container()\n  //   // 拼接背景\n  //   let bgHeight = 0\n  //   this.options.bgSprites.forEach((key) => {\n  //     const bg = new PIXI.Sprite(PIXI.loader.resources[key].texture)\n  //     const scale = this.app.screen.width / bg.width\n  //     bg.scale.x = scale\n  //     bg.scale.y = scale\n  //     bg.x = 0\n  //     bg.y = bgHeight\n  //     bgHeight += bg.height\n  //     this.bg.addChild(bg)\n  //   })\n  //   // 加入场景\n  //   this.app.stage.addChild(this.bg)\n  //   // 设置滚动高度\n  //   this.scrollHeight = this.bg.height - this.height\n  // }\n\n\n  initBg() {\n    // 创建背景\n    this.bg = new PIXI.Graphics();\n    this.bg.beginFill(0xfdfbe2);\n    this.bg.drawRect(0, 0, this.app.screen.width, this.app.screen.height * 3);\n    this.bg.endFill();\n    this.bg.x = 0;\n    this.bg.y = 0;\n    this.app.stage.addChild(this.bg); // 设置滚动高度\n\n    this.scrollHeight = this.bg.height - this.height;\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 文字相关\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  initTexts() {\n    if (typeof this.options.texts === 'object') {\n      Object.keys(this.options.texts).forEach(key => {\n        // 创建\n        const options = this.options.texts[key];\n        const text = new PIXI.Text(options.text, options.options); // 设置属性\n\n        this.setAnchor(text, options.anchor);\n        this.setPosition(text, options.position); // 设置点击事件\n\n        if (options.link) {\n          text.interactive = true;\n          text.on('tap', e => {// location.href = options.link\n          });\n        } // 加入场景\n\n\n        this.app.stage.addChild(text);\n        this.texts[key] = text;\n      });\n    }\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 精灵相关\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  initSprites() {\n    if (typeof this.options.sprites === 'object') {\n      Object.keys(this.options.sprites).forEach(key => {\n        // 创建\n        const options = this.options.sprites[key];\n        const sprite = new PIXI.Sprite(PIXI.loader.resources[options.key].texture); // 设置属性\n\n        this.setSize(sprite, options.size);\n        this.setAnchor(sprite, options.anchor);\n        this.setPosition(sprite, options.position); // 加入场景\n\n        this.app.stage.addChild(sprite);\n        this.sprites[key] = sprite;\n      });\n    }\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 通用属性设置\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 设置尺寸\n\n\n  setSize(obj, size) {\n    if (size.mode === 'widthFit') {\n      // 按宽度适应\n      const scale = this.app.screen.width * size.width / obj.width;\n      obj.scale.x = scale;\n      obj.scale.y = scale;\n    } else if (size.mode === 'heightFit') {\n      // 按高度适应\n      const scale = this.app.screen.height * size.height / obj.height;\n      obj.scale.x = scale;\n      obj.scale.y = scale;\n    } else {\n      // 自定义\n      obj.width = size.width;\n      obj.height = size.height;\n    }\n  } // 设置锚点\n\n\n  setAnchor(obj, anchor) {\n    if (typeof anchor === 'string') {\n      const anchorMap = this.positionMap(anchor);\n      obj.anchor.x = anchorMap.x;\n      obj.anchor.y = anchorMap.y;\n    } else {\n      obj.anchor.x = anchor.x;\n      obj.anchor.y = anchor.y;\n    }\n  } // 设置位置\n\n\n  setPosition(obj, position) {\n    if (typeof position === 'string') {\n      position = this.positionMap(position);\n    }\n\n    obj.position.x = position.x * this.app.screen.width;\n    obj.position.y = position.y * this.app.screen.height;\n  } // 位置转换\n\n\n  positionMap(type) {\n    const map = {\n      top: {\n        x: 0.5,\n        y: 0\n      },\n      right: {\n        x: 1,\n        y: 0.5\n      },\n      bottom: {\n        x: 0.5,\n        y: 1\n      },\n      left: {\n        x: 0,\n        y: 0.5\n      },\n      topLeft: {\n        x: 0,\n        y: 0\n      },\n      topRight: {\n        x: 1,\n        y: 0\n      },\n      bottomLeft: {\n        x: 0,\n        y: 1\n      },\n      bottomRight: {\n        x: 1,\n        y: 1\n      },\n      center: {\n        x: 0.5,\n        y: 0.5\n      }\n    };\n    return map[type] || {\n      x: 0,\n      y: 0\n    };\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 进度相关\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  initTimeline() {\n    this.timeline = new TimelineMax({\n      paused: true\n    }); // 设置精灵动画\n\n    Object.keys(this.spritesAnimations).forEach(key => {\n      this.setAnimation(this.sprites[key], this.spritesAnimations[key]);\n    }); // 设置文本动画\n\n    Object.keys(this.textsAnimations).forEach(key => {\n      this.setAnimation(this.texts[key], this.textsAnimations[key]);\n    }); // 背景动画\n\n    const bgAction = TweenMax.fromTo(this.bg, 1, {\n      y: 0\n    }, {\n      y: -this.scrollHeight\n    });\n    const bgTimeline = new TimelineMax();\n    bgTimeline.add(bgAction, 0);\n    this.timeline.add(bgTimeline, 0);\n  } // 动画对象\n\n\n  setAnimation(obj, animations) {\n    if (obj && animations && animations instanceof Array) {\n      animations.forEach(({\n        from,\n        to,\n        frames,\n        infinite,\n        frameRate,\n        delay = 0,\n        duration = 1\n      }) => {\n        if (frames) {\n          // 帧动画\n          if (infinite) {\n            // 无限\n            obj.frames = frames;\n            obj.currentFrame = 0;\n            this.aniIntervals.push(setInterval(() => {\n              obj.currentFrame += 1;\n              if (obj.currentFrame >= obj.frames.length) obj.currentFrame = 0;\n              const frame = obj.frames[obj.currentFrame];\n              obj.texture = PIXI.loader.resources[frame].texture;\n            }, duration * 1000 / frameRate));\n          } else {\n            this.on('progress', progress => {\n              const frameProgress = (progress - delay) / duration;\n              let index = Math.floor(frameProgress * frames.length);\n\n              if (index < frames.length && index >= 0) {\n                const frame = frames[index];\n                obj.texture = PIXI.loader.resources[frame].texture;\n              }\n            });\n          }\n        } else if (from || to) {\n          // 过渡动画\n          let action;\n\n          if (from && to) {\n            action = TweenMax.fromTo(obj, duration, from, to);\n          } else if (to) {\n            action = TweenMax.to(obj, duration, to);\n          } else if (from) {\n            action = TweenMax.from(obj, duration, from);\n          }\n\n          const timeline = new TimelineMax({\n            delay\n          });\n          timeline.add(action, 0);\n          timeline.play();\n\n          if (!(to && to.repeat === -1)) {\n            this.timeline.add(timeline, 0);\n          }\n        }\n      });\n    }\n  } // ────────────────────────────────────────────────────────────────────────────────\n  // 滑动相关\n  // ────────────────────────────────────────────────────────────────────────────────\n\n\n  initTouch() {\n    const touchOptions = Object.assign({\n      touch: 'body'\n    }, this.options.touchOptions, {\n      min: -this.bg.height + this.height,\n      max: 0,\n      value: 0,\n      change: this.touchmove.bind(this)\n    });\n    this.alloyTouch = new AlloyTouch(touchOptions);\n  }\n\n  touchmove(value) {\n    // 总播放进度\n    this.progress = -value / this.scrollHeight;\n    this.progress = this.progress < 0 ? 0 : this.progress;\n    this.progress = this.progress > 1 ? 1 : this.progress; // 控制进度条\n\n    this.timeline.seek(this.progress); // 触发事件\n\n    this.trigger('progress', this.progress);\n  }\n\n}\n\nexport default LongTake;","map":{"version":3,"sources":["/Users/caiyifan/Desktop/demo/in-the-end-react/src/LongTake.js"],"names":["PIXI","TweenMax","TimelineMax","AlloyTouch","LongTake","constructor","options","lib","callbacks","loadProgress","container","document","body","width","window","innerWidth","height","innerHeight","resource","sprites","spritesAnimations","textsAnimations","autoLoad","texts","aniIntervals","app","Application","resolution","transparent","appendChild","view","load","destroy","forEach","interval","clearInterval","loader","add","on","bind","loadDone","trigger","progress","initBg","initTexts","initSprites","initTimeline","initTouch","name","callback","push","off","Array","index","indexOf","splice","params","cb","bg","Graphics","beginFill","drawRect","screen","endFill","x","y","stage","addChild","scrollHeight","Object","keys","key","text","Text","setAnchor","anchor","setPosition","position","link","interactive","e","sprite","Sprite","resources","texture","setSize","size","obj","mode","scale","anchorMap","positionMap","type","map","top","right","bottom","left","topLeft","topRight","bottomLeft","bottomRight","center","timeline","paused","setAnimation","bgAction","fromTo","bgTimeline","animations","from","to","frames","infinite","frameRate","delay","duration","currentFrame","setInterval","length","frame","frameProgress","Math","floor","action","play","repeat","touchOptions","assign","touch","min","max","value","change","touchmove","alloyTouch","seek"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,eAAtC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,QAAN,CAAe;AACb;AACA;AACA;AACAC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB;AACA,SAAKC,GAAL,GAAW;AAAEP,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,WAAlB;AAA+BC,MAAAA;AAA/B,KAAX,CAFoB,CAGpB;;AACA,SAAKK,SAAL,GAAiB;AACfC,MAAAA,YAAY,EAAE;AADC,KAAjB,CAJoB,CAOpB;;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKI,SAAL,GAAiBJ,OAAO,CAACI,SAAR,IAAqBC,QAAQ,CAACC,IAA/C,CAToB,CASgC;;AACpD,SAAKC,KAAL,GAAaP,OAAO,CAACO,KAAR,IAAiBC,MAAM,CAACC,UAArC,CAVoB,CAU4B;;AAChD,SAAKC,MAAL,GAAcV,OAAO,CAACU,MAAR,IAAkBF,MAAM,CAACG,WAAvC,CAXoB,CAW+B;;AACnD,SAAKC,QAAL,GAAgBZ,OAAO,CAACY,QAAR,IAAoB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAApC,CAZoB,CAYgC;;AACpD,SAAKC,iBAAL,GAAyB,KAAKd,OAAL,CAAac,iBAAb,IAAkC,EAA3D,CAboB,CAa0C;;AAC9D,SAAKC,eAAL,GAAuB,KAAKf,OAAL,CAAae,eAAb,IAAgC,EAAvD,CAdoB,CAcsC;;AAC1D,SAAKC,QAAL,GAAgB,OAAOhB,OAAO,CAACgB,QAAf,KAA4B,WAA5B,GAA0C,IAA1C,GAAiDhB,OAAO,CAACgB,QAAzE,CAfoB,CAe8D;AAClF;;AACA,SAAKH,OAAL,GAAe,EAAf,CAjBoB,CAkBpB;;AACA,SAAKI,KAAL,GAAa,EAAb,CAnBoB,CAoBpB;;AACA,SAAKC,YAAL,GAAoB,EAApB,CArBoB,CAsBpB;;AACA,SAAKC,GAAL,GAAW,IAAIzB,IAAI,CAAC0B,WAAT,CAAqB;AAC9BC,MAAAA,UAAU,EAAE,CADkB;AAE9BC,MAAAA,WAAW,EAAE,IAFiB;AAG9Bf,MAAAA,KAAK,EAAE,KAAKA,KAHkB;AAI9BG,MAAAA,MAAM,EAAE,KAAKA;AAJiB,KAArB,CAAX,CAvBoB,CA6BpB;;AACA,SAAKN,SAAL,CAAemB,WAAf,CAA2B,KAAKJ,GAAL,CAASK,IAApC,EA9BoB,CA+BpB;;AACA,QAAI,KAAKR,QAAT,EAAmB,KAAKS,IAAL;AACpB;;AAEDC,EAAAA,OAAO,GAAI;AACT,SAAKR,YAAL,CAAkBS,OAAlB,CAA2BC,QAAD,IAAc;AACtCC,MAAAA,aAAa,CAACD,QAAD,CAAb;AACD,KAFD;AAGA,SAAKT,GAAL,CAASO,OAAT,CAAiB,IAAjB;AACD,GA5CY,CA8Cb;AACA;AACA;;;AACAD,EAAAA,IAAI,GAAI;AACN/B,IAAAA,IAAI,CAACoC,MAAL,CACGC,GADH,CACO,KAAKnB,QAAL,CAAcC,OADrB,EAEGmB,EAFH,CAEM,UAFN,EAEkB,KAAK7B,YAAL,CAAkB8B,IAAlB,CAAuB,IAAvB,CAFlB,EAGGR,IAHH,CAGQ,KAAKS,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAHR;AAID;;AAED9B,EAAAA,YAAY,CAAE2B,MAAF,EAAU;AACpB,SAAKK,OAAL,CAAa,cAAb,EAA6BL,MAAM,CAACM,QAApC;AACD;;AAEDF,EAAAA,QAAQ,GAAI;AACV,SAAKG,MAAL;AACA,SAAKC,SAAL;AACA,SAAKC,WAAL;AACA,SAAKC,YAAL;AACA,SAAKC,SAAL;AACA,SAAKN,OAAL,CAAa,UAAb;AACD,GAnEY,CAqEb;AACA;AACA;;;AACAH,EAAAA,EAAE,CAAEU,IAAF,EAAQC,QAAR,EAAkB;AAClB,SAAKzC,SAAL,CAAewC,IAAf,IAAuB,KAAKxC,SAAL,CAAewC,IAAf,KAAwB,EAA/C;AACA,SAAKxC,SAAL,CAAewC,IAAf,EAAqBE,IAArB,CAA0BD,QAA1B;AACD;;AAEDE,EAAAA,GAAG,CAAEH,IAAF,EAAQC,QAAR,EAAkB;AACnB,UAAMzC,SAAS,GAAG,KAAKA,SAAL,CAAewC,IAAf,CAAlB;;AACA,QAAIxC,SAAS,IAAIA,SAAS,YAAY4C,KAAtC,EAA6C;AAC3C,YAAMC,KAAK,GAAG7C,SAAS,CAAC8C,OAAV,CAAkBL,QAAlB,CAAd;AACA,UAAII,KAAK,KAAK,CAAC,CAAf,EAAkB7C,SAAS,CAAC+C,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACnB;AACF;;AAEDZ,EAAAA,OAAO,CAAEO,IAAF,EAAQQ,MAAR,EAAgB;AACrB,UAAMhD,SAAS,GAAG,KAAKA,SAAL,CAAewC,IAAf,CAAlB;;AACA,QAAIxC,SAAS,IAAIA,SAAS,YAAY4C,KAAtC,EAA6C;AAC3C5C,MAAAA,SAAS,CAACyB,OAAV,CAAmBwB,EAAD,IAAQ;AACxBA,QAAAA,EAAE,CAACD,MAAD,CAAF;AACD,OAFD;AAGD;AACF,GA5FY,CA8Fb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAb,EAAAA,MAAM,GAAI;AACR;AACA,SAAKe,EAAL,GAAU,IAAI1D,IAAI,CAAC2D,QAAT,EAAV;AACA,SAAKD,EAAL,CAAQE,SAAR,CAAkB,QAAlB;AACA,SAAKF,EAAL,CAAQG,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,KAAKpC,GAAL,CAASqC,MAAT,CAAgBjD,KAAvC,EAA8C,KAAKY,GAAL,CAASqC,MAAT,CAAgB9C,MAAhB,GAAyB,CAAvE;AACA,SAAK0C,EAAL,CAAQK,OAAR;AACA,SAAKL,EAAL,CAAQM,CAAR,GAAY,CAAZ;AACA,SAAKN,EAAL,CAAQO,CAAR,GAAY,CAAZ;AACA,SAAKxC,GAAL,CAASyC,KAAT,CAAeC,QAAf,CAAwB,KAAKT,EAA7B,EARQ,CASR;;AACA,SAAKU,YAAL,GAAoB,KAAKV,EAAL,CAAQ1C,MAAR,GAAiB,KAAKA,MAA1C;AACD,GAjIY,CAmIb;AACA;AACA;;;AACA4B,EAAAA,SAAS,GAAI;AACX,QAAI,OAAO,KAAKtC,OAAL,CAAaiB,KAApB,KAA8B,QAAlC,EAA4C;AAC1C8C,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhE,OAAL,CAAaiB,KAAzB,EAAgCU,OAAhC,CAAyCsC,GAAD,IAAS;AAC/C;AACA,cAAMjE,OAAO,GAAG,KAAKA,OAAL,CAAaiB,KAAb,CAAmBgD,GAAnB,CAAhB;AACA,cAAMC,IAAI,GAAG,IAAIxE,IAAI,CAACyE,IAAT,CAAcnE,OAAO,CAACkE,IAAtB,EAA4BlE,OAAO,CAACA,OAApC,CAAb,CAH+C,CAI/C;;AACA,aAAKoE,SAAL,CAAeF,IAAf,EAAqBlE,OAAO,CAACqE,MAA7B;AACA,aAAKC,WAAL,CAAiBJ,IAAjB,EAAuBlE,OAAO,CAACuE,QAA/B,EAN+C,CAO/C;;AACA,YAAIvE,OAAO,CAACwE,IAAZ,EAAkB;AAChBN,UAAAA,IAAI,CAACO,WAAL,GAAmB,IAAnB;AACAP,UAAAA,IAAI,CAAClC,EAAL,CAAQ,KAAR,EAAgB0C,CAAD,IAAO,CACpB;AACD,WAFD;AAGD,SAb8C,CAc/C;;;AACA,aAAKvD,GAAL,CAASyC,KAAT,CAAeC,QAAf,CAAwBK,IAAxB;AACA,aAAKjD,KAAL,CAAWgD,GAAX,IAAkBC,IAAlB;AACD,OAjBD;AAkBD;AACF,GA3JY,CA6Jb;AACA;AACA;;;AACA3B,EAAAA,WAAW,GAAI;AACb,QAAI,OAAO,KAAKvC,OAAL,CAAaa,OAApB,KAAgC,QAApC,EAA8C;AAC5CkD,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKhE,OAAL,CAAaa,OAAzB,EAAkCc,OAAlC,CAA2CsC,GAAD,IAAS;AACjD;AACA,cAAMjE,OAAO,GAAG,KAAKA,OAAL,CAAaa,OAAb,CAAqBoD,GAArB,CAAhB;AACA,cAAMU,MAAM,GAAG,IAAIjF,IAAI,CAACkF,MAAT,CAAgBlF,IAAI,CAACoC,MAAL,CAAY+C,SAAZ,CAAsB7E,OAAO,CAACiE,GAA9B,EAAmCa,OAAnD,CAAf,CAHiD,CAIjD;;AACA,aAAKC,OAAL,CAAaJ,MAAb,EAAqB3E,OAAO,CAACgF,IAA7B;AACA,aAAKZ,SAAL,CAAeO,MAAf,EAAuB3E,OAAO,CAACqE,MAA/B;AACA,aAAKC,WAAL,CAAiBK,MAAjB,EAAyB3E,OAAO,CAACuE,QAAjC,EAPiD,CAQjD;;AACA,aAAKpD,GAAL,CAASyC,KAAT,CAAeC,QAAf,CAAwBc,MAAxB;AACA,aAAK9D,OAAL,CAAaoD,GAAb,IAAoBU,MAApB;AACD,OAXD;AAYD;AACF,GA/KY,CAiLb;AACA;AACA;AACA;;;AACAI,EAAAA,OAAO,CAAEE,GAAF,EAAOD,IAAP,EAAa;AAClB,QAAIA,IAAI,CAACE,IAAL,KAAc,UAAlB,EAA8B;AAAE;AAC9B,YAAMC,KAAK,GAAG,KAAKhE,GAAL,CAASqC,MAAT,CAAgBjD,KAAhB,GAAwByE,IAAI,CAACzE,KAA7B,GAAqC0E,GAAG,CAAC1E,KAAvD;AACA0E,MAAAA,GAAG,CAACE,KAAJ,CAAUzB,CAAV,GAAcyB,KAAd;AACAF,MAAAA,GAAG,CAACE,KAAJ,CAAUxB,CAAV,GAAcwB,KAAd;AACD,KAJD,MAIO,IAAIH,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAAE;AACtC,YAAMC,KAAK,GAAG,KAAKhE,GAAL,CAASqC,MAAT,CAAgB9C,MAAhB,GAAyBsE,IAAI,CAACtE,MAA9B,GAAuCuE,GAAG,CAACvE,MAAzD;AACAuE,MAAAA,GAAG,CAACE,KAAJ,CAAUzB,CAAV,GAAcyB,KAAd;AACAF,MAAAA,GAAG,CAACE,KAAJ,CAAUxB,CAAV,GAAcwB,KAAd;AACD,KAJM,MAIA;AAAE;AACPF,MAAAA,GAAG,CAAC1E,KAAJ,GAAYyE,IAAI,CAACzE,KAAjB;AACA0E,MAAAA,GAAG,CAACvE,MAAJ,GAAasE,IAAI,CAACtE,MAAlB;AACD;AACF,GAlMY,CAoMb;;;AACA0D,EAAAA,SAAS,CAAEa,GAAF,EAAOZ,MAAP,EAAe;AACtB,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAMe,SAAS,GAAG,KAAKC,WAAL,CAAiBhB,MAAjB,CAAlB;AACAY,MAAAA,GAAG,CAACZ,MAAJ,CAAWX,CAAX,GAAe0B,SAAS,CAAC1B,CAAzB;AACAuB,MAAAA,GAAG,CAACZ,MAAJ,CAAWV,CAAX,GAAeyB,SAAS,CAACzB,CAAzB;AACD,KAJD,MAIO;AACLsB,MAAAA,GAAG,CAACZ,MAAJ,CAAWX,CAAX,GAAeW,MAAM,CAACX,CAAtB;AACAuB,MAAAA,GAAG,CAACZ,MAAJ,CAAWV,CAAX,GAAeU,MAAM,CAACV,CAAtB;AACD;AACF,GA9MY,CAgNb;;;AACAW,EAAAA,WAAW,CAAEW,GAAF,EAAOV,QAAP,EAAiB;AAC1B,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChCA,MAAAA,QAAQ,GAAG,KAAKc,WAAL,CAAiBd,QAAjB,CAAX;AACD;;AACDU,IAAAA,GAAG,CAACV,QAAJ,CAAab,CAAb,GAAiBa,QAAQ,CAACb,CAAT,GAAa,KAAKvC,GAAL,CAASqC,MAAT,CAAgBjD,KAA9C;AACA0E,IAAAA,GAAG,CAACV,QAAJ,CAAaZ,CAAb,GAAiBY,QAAQ,CAACZ,CAAT,GAAa,KAAKxC,GAAL,CAASqC,MAAT,CAAgB9C,MAA9C;AACD,GAvNY,CAyNb;;;AACA2E,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACjB,UAAMC,GAAG,GAAG;AACVC,MAAAA,GAAG,EAAE;AAAE9B,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb,OADK;AAEV8B,MAAAA,KAAK,EAAE;AAAE/B,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAFG;AAGV+B,MAAAA,MAAM,EAAE;AAAEhC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb,OAHE;AAIVgC,MAAAA,IAAI,EAAE;AAAEjC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAJI;AAKViC,MAAAA,OAAO,EAAE;AAAElC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OALC;AAMVkC,MAAAA,QAAQ,EAAE;AAAEnC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OANA;AAOVmC,MAAAA,UAAU,EAAE;AAAEpC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAPF;AAQVoC,MAAAA,WAAW,EAAE;AAAErC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OARH;AASVqC,MAAAA,MAAM,EAAE;AAAEtC,QAAAA,CAAC,EAAE,GAAL;AAAUC,QAAAA,CAAC,EAAE;AAAb;AATE,KAAZ;AAWA,WAAO4B,GAAG,CAACD,IAAD,CAAH,IAAa;AAAE5B,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAApB;AACD,GAvOY,CAyOb;AACA;AACA;;;AACAnB,EAAAA,YAAY,GAAI;AACd,SAAKyD,QAAL,GAAgB,IAAIrG,WAAJ,CAAgB;AAC9BsG,MAAAA,MAAM,EAAE;AADsB,KAAhB,CAAhB,CADc,CAKd;;AACAnC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKlD,iBAAjB,EAAoCa,OAApC,CAA6CsC,GAAD,IAAS;AACnD,WAAKkC,YAAL,CAAkB,KAAKtF,OAAL,CAAaoD,GAAb,CAAlB,EAAqC,KAAKnD,iBAAL,CAAuBmD,GAAvB,CAArC;AACD,KAFD,EANc,CAUd;;AACAF,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKjD,eAAjB,EAAkCY,OAAlC,CAA2CsC,GAAD,IAAS;AACjD,WAAKkC,YAAL,CAAkB,KAAKlF,KAAL,CAAWgD,GAAX,CAAlB,EAAmC,KAAKlD,eAAL,CAAqBkD,GAArB,CAAnC;AACD,KAFD,EAXc,CAed;;AACA,UAAMmC,QAAQ,GAAGzG,QAAQ,CAAC0G,MAAT,CAAgB,KAAKjD,EAArB,EAAyB,CAAzB,EAA4B;AAAEO,MAAAA,CAAC,EAAE;AAAL,KAA5B,EAAsC;AAAEA,MAAAA,CAAC,EAAE,CAAC,KAAKG;AAAX,KAAtC,CAAjB;AACA,UAAMwC,UAAU,GAAG,IAAI1G,WAAJ,EAAnB;AACA0G,IAAAA,UAAU,CAACvE,GAAX,CAAeqE,QAAf,EAAyB,CAAzB;AACA,SAAKH,QAAL,CAAclE,GAAd,CAAkBuE,UAAlB,EAA8B,CAA9B;AACD,GAhQY,CAkQb;;;AACAH,EAAAA,YAAY,CAAElB,GAAF,EAAOsB,UAAP,EAAmB;AAC7B,QAAItB,GAAG,IAAIsB,UAAP,IAAqBA,UAAU,YAAYzD,KAA/C,EAAsD;AACpDyD,MAAAA,UAAU,CAAC5E,OAAX,CAAmB,CAAC;AAAE6E,QAAAA,IAAF;AAAQC,QAAAA,EAAR;AAAYC,QAAAA,MAAZ;AAAoBC,QAAAA,QAApB;AAA8BC,QAAAA,SAA9B;AAAyCC,QAAAA,KAAK,GAAG,CAAjD;AAAoDC,QAAAA,QAAQ,GAAG;AAA/D,OAAD,KAAwE;AACzF,YAAIJ,MAAJ,EAAY;AAAE;AACZ,cAAIC,QAAJ,EAAc;AAAE;AACd1B,YAAAA,GAAG,CAACyB,MAAJ,GAAaA,MAAb;AACAzB,YAAAA,GAAG,CAAC8B,YAAJ,GAAmB,CAAnB;AACA,iBAAK7F,YAAL,CAAkB0B,IAAlB,CAAuBoE,WAAW,CAAC,MAAM;AACvC/B,cAAAA,GAAG,CAAC8B,YAAJ,IAAoB,CAApB;AACA,kBAAI9B,GAAG,CAAC8B,YAAJ,IAAoB9B,GAAG,CAACyB,MAAJ,CAAWO,MAAnC,EAA2ChC,GAAG,CAAC8B,YAAJ,GAAmB,CAAnB;AAC3C,oBAAMG,KAAK,GAAGjC,GAAG,CAACyB,MAAJ,CAAWzB,GAAG,CAAC8B,YAAf,CAAd;AACA9B,cAAAA,GAAG,CAACH,OAAJ,GAAcpF,IAAI,CAACoC,MAAL,CAAY+C,SAAZ,CAAsBqC,KAAtB,EAA6BpC,OAA3C;AACD,aALiC,EAK/BgC,QAAQ,GAAG,IAAX,GAAkBF,SALa,CAAlC;AAMD,WATD,MASO;AACL,iBAAK5E,EAAL,CAAQ,UAAR,EAAqBI,QAAD,IAAc;AAChC,oBAAM+E,aAAa,GAAG,CAAC/E,QAAQ,GAAGyE,KAAZ,IAAqBC,QAA3C;AACA,kBAAI/D,KAAK,GAAGqE,IAAI,CAACC,KAAL,CAAWF,aAAa,GAAGT,MAAM,CAACO,MAAlC,CAAZ;;AACA,kBAAIlE,KAAK,GAAG2D,MAAM,CAACO,MAAf,IAAyBlE,KAAK,IAAI,CAAtC,EAAyC;AACvC,sBAAMmE,KAAK,GAAGR,MAAM,CAAC3D,KAAD,CAApB;AACAkC,gBAAAA,GAAG,CAACH,OAAJ,GAAcpF,IAAI,CAACoC,MAAL,CAAY+C,SAAZ,CAAsBqC,KAAtB,EAA6BpC,OAA3C;AACD;AACF,aAPD;AAQD;AACF,SApBD,MAoBO,IAAI0B,IAAI,IAAIC,EAAZ,EAAgB;AAAE;AACvB,cAAIa,MAAJ;;AACA,cAAId,IAAI,IAAIC,EAAZ,EAAgB;AACda,YAAAA,MAAM,GAAG3H,QAAQ,CAAC0G,MAAT,CAAgBpB,GAAhB,EAAqB6B,QAArB,EAA+BN,IAA/B,EAAqCC,EAArC,CAAT;AACD,WAFD,MAEO,IAAIA,EAAJ,EAAQ;AACba,YAAAA,MAAM,GAAG3H,QAAQ,CAAC8G,EAAT,CAAYxB,GAAZ,EAAiB6B,QAAjB,EAA2BL,EAA3B,CAAT;AACD,WAFM,MAEA,IAAID,IAAJ,EAAU;AACfc,YAAAA,MAAM,GAAG3H,QAAQ,CAAC6G,IAAT,CAAcvB,GAAd,EAAmB6B,QAAnB,EAA6BN,IAA7B,CAAT;AACD;;AACD,gBAAMP,QAAQ,GAAG,IAAIrG,WAAJ,CAAgB;AAAEiH,YAAAA;AAAF,WAAhB,CAAjB;AACAZ,UAAAA,QAAQ,CAAClE,GAAT,CAAauF,MAAb,EAAqB,CAArB;AACArB,UAAAA,QAAQ,CAACsB,IAAT;;AACA,cAAI,EAAEd,EAAE,IAAIA,EAAE,CAACe,MAAH,KAAc,CAAC,CAAvB,CAAJ,EAA+B;AAC7B,iBAAKvB,QAAL,CAAclE,GAAd,CAAkBkE,QAAlB,EAA4B,CAA5B;AACD;AACF;AACF,OArCD;AAsCD;AACF,GA5SY,CA8Sb;AACA;AACA;;;AACAxD,EAAAA,SAAS,GAAI;AACX,UAAMgF,YAAY,GAAG1D,MAAM,CAAC2D,MAAP,CAAc;AACjCC,MAAAA,KAAK,EAAE;AAD0B,KAAd,EAElB,KAAK3H,OAAL,CAAayH,YAFK,EAES;AAC5BG,MAAAA,GAAG,EAAE,CAAC,KAAKxE,EAAL,CAAQ1C,MAAT,GAAkB,KAAKA,MADA;AAE5BmH,MAAAA,GAAG,EAAE,CAFuB;AAG5BC,MAAAA,KAAK,EAAE,CAHqB;AAI5BC,MAAAA,MAAM,EAAE,KAAKC,SAAL,CAAe/F,IAAf,CAAoB,IAApB;AAJoB,KAFT,CAArB;AAQA,SAAKgG,UAAL,GAAkB,IAAIpI,UAAJ,CAAe4H,YAAf,CAAlB;AACD;;AAEDO,EAAAA,SAAS,CAAEF,KAAF,EAAS;AAChB;AACA,SAAK1F,QAAL,GAAgB,CAAC0F,KAAD,GAAS,KAAKhE,YAA9B;AACA,SAAK1B,QAAL,GAAgB,KAAKA,QAAL,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,KAAKA,QAA7C;AACA,SAAKA,QAAL,GAAgB,KAAKA,QAAL,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,KAAKA,QAA7C,CAJgB,CAKhB;;AACA,SAAK6D,QAAL,CAAciC,IAAd,CAAmB,KAAK9F,QAAxB,EANgB,CAOhB;;AACA,SAAKD,OAAL,CAAa,UAAb,EAAyB,KAAKC,QAA9B;AACD;;AAtUY;;AAyUf,eAAetC,QAAf","sourcesContent":["import * as PIXI from 'pixi'\nimport { TweenMax, TimelineMax } from 'gsap/TweenMax'\nimport AlloyTouch from 'alloytouch'\n\nclass LongTake {\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 初始化\n  // ────────────────────────────────────────────────────────────────────────────────\n  constructor (options) {\n    // 库\n    this.lib = { PIXI, TweenMax, TimelineMax, AlloyTouch }\n    // 事件监听\n    this.callbacks = {\n      loadProgress: []\n    }\n    // 参数\n    this.options = options\n    this.container = options.container || document.body // 场景容器\n    this.width = options.width || window.innerWidth // 场景宽\n    this.height = options.height || window.innerHeight // 场景高\n    this.resource = options.resource || { sprites: [] } // 要加载的资源\n    this.spritesAnimations = this.options.spritesAnimations || {} // 精灵动画集合\n    this.textsAnimations = this.options.textsAnimations || {} // 文本动画集合\n    this.autoLoad = typeof options.autoLoad === 'undefined' ? true : options.autoLoad // 自动加载\n    // 精灵图集合\n    this.sprites = {}\n    // 文本集合\n    this.texts = {}\n    // 动画定时器\n    this.aniIntervals = []\n    // 创建场景\n    this.app = new PIXI.Application({\n      resolution: 2,\n      transparent: true,\n      width: this.width,\n      height: this.height\n    })\n    // 加入场景\n    this.container.appendChild(this.app.view)\n    // 开始加载\n    if (this.autoLoad) this.load()\n  }\n\n  destroy () {\n    this.aniIntervals.forEach((interval) => {\n      clearInterval(interval)\n    })\n    this.app.destroy(true)\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 加载\n  // ────────────────────────────────────────────────────────────────────────────────\n  load () {\n    PIXI.loader\n      .add(this.resource.sprites)\n      .on('progress', this.loadProgress.bind(this))\n      .load(this.loadDone.bind(this))\n  }\n\n  loadProgress (loader) {\n    this.trigger('loadProgress', loader.progress)\n  }\n\n  loadDone () {\n    this.initBg()\n    this.initTexts()\n    this.initSprites()\n    this.initTimeline()\n    this.initTouch()\n    this.trigger('loadDone')\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 事件\n  // ────────────────────────────────────────────────────────────────────────────────\n  on (name, callback) {\n    this.callbacks[name] = this.callbacks[name] || []\n    this.callbacks[name].push(callback)\n  }\n\n  off (name, callback) {\n    const callbacks = this.callbacks[name]\n    if (callbacks && callbacks instanceof Array) {\n      const index = callbacks.indexOf(callback)\n      if (index !== -1) callbacks.splice(index, 1)\n    }\n  }\n\n  trigger (name, params) {\n    const callbacks = this.callbacks[name]\n    if (callbacks && callbacks instanceof Array) {\n      callbacks.forEach((cb) => {\n        cb(params)\n      })\n    }\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 背景相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  // initBg () {\n  //   // 创建背景\n  //   this.bg = new PIXI.Container()\n  //   // 拼接背景\n  //   let bgHeight = 0\n  //   this.options.bgSprites.forEach((key) => {\n  //     const bg = new PIXI.Sprite(PIXI.loader.resources[key].texture)\n  //     const scale = this.app.screen.width / bg.width\n  //     bg.scale.x = scale\n  //     bg.scale.y = scale\n  //     bg.x = 0\n  //     bg.y = bgHeight\n  //     bgHeight += bg.height\n  //     this.bg.addChild(bg)\n  //   })\n  //   // 加入场景\n  //   this.app.stage.addChild(this.bg)\n  //   // 设置滚动高度\n  //   this.scrollHeight = this.bg.height - this.height\n  // }\n\n  initBg () {\n    // 创建背景\n    this.bg = new PIXI.Graphics()\n    this.bg.beginFill(0xfdfbe2)\n    this.bg.drawRect(0, 0, this.app.screen.width, this.app.screen.height * 3)\n    this.bg.endFill()\n    this.bg.x = 0\n    this.bg.y = 0\n    this.app.stage.addChild(this.bg)\n    // 设置滚动高度\n    this.scrollHeight = this.bg.height - this.height\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 文字相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  initTexts () {\n    if (typeof this.options.texts === 'object') {\n      Object.keys(this.options.texts).forEach((key) => {\n        // 创建\n        const options = this.options.texts[key]\n        const text = new PIXI.Text(options.text, options.options)\n        // 设置属性\n        this.setAnchor(text, options.anchor)\n        this.setPosition(text, options.position)\n        // 设置点击事件\n        if (options.link) {\n          text.interactive = true\n          text.on('tap', (e) => {\n            // location.href = options.link\n          })\n        }\n        // 加入场景\n        this.app.stage.addChild(text)\n        this.texts[key] = text\n      })\n    }\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 精灵相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  initSprites () {\n    if (typeof this.options.sprites === 'object') {\n      Object.keys(this.options.sprites).forEach((key) => {\n        // 创建\n        const options = this.options.sprites[key]\n        const sprite = new PIXI.Sprite(PIXI.loader.resources[options.key].texture)\n        // 设置属性\n        this.setSize(sprite, options.size)\n        this.setAnchor(sprite, options.anchor)\n        this.setPosition(sprite, options.position)\n        // 加入场景\n        this.app.stage.addChild(sprite)\n        this.sprites[key] = sprite\n      })\n    }\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 通用属性设置\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 设置尺寸\n  setSize (obj, size) {\n    if (size.mode === 'widthFit') { // 按宽度适应\n      const scale = this.app.screen.width * size.width / obj.width\n      obj.scale.x = scale\n      obj.scale.y = scale\n    } else if (size.mode === 'heightFit') { // 按高度适应\n      const scale = this.app.screen.height * size.height / obj.height\n      obj.scale.x = scale\n      obj.scale.y = scale\n    } else { // 自定义\n      obj.width = size.width\n      obj.height = size.height\n    }\n  }\n\n  // 设置锚点\n  setAnchor (obj, anchor) {\n    if (typeof anchor === 'string') {\n      const anchorMap = this.positionMap(anchor)\n      obj.anchor.x = anchorMap.x\n      obj.anchor.y = anchorMap.y\n    } else {\n      obj.anchor.x = anchor.x\n      obj.anchor.y = anchor.y\n    }\n  }\n\n  // 设置位置\n  setPosition (obj, position) {\n    if (typeof position === 'string') {\n      position = this.positionMap(position)\n    }\n    obj.position.x = position.x * this.app.screen.width\n    obj.position.y = position.y * this.app.screen.height\n  }\n\n  // 位置转换\n  positionMap (type) {\n    const map = {\n      top: { x: 0.5, y: 0 },\n      right: { x: 1, y: 0.5 },\n      bottom: { x: 0.5, y: 1 },\n      left: { x: 0, y: 0.5 },\n      topLeft: { x: 0, y: 0 },\n      topRight: { x: 1, y: 0 },\n      bottomLeft: { x: 0, y: 1 },\n      bottomRight: { x: 1, y: 1 },\n      center: { x: 0.5, y: 0.5 }\n    }\n    return map[type] || { x: 0, y: 0 }\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 进度相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  initTimeline () {\n    this.timeline = new TimelineMax({\n      paused: true\n    })\n\n    // 设置精灵动画\n    Object.keys(this.spritesAnimations).forEach((key) => {\n      this.setAnimation(this.sprites[key], this.spritesAnimations[key])\n    })\n\n    // 设置文本动画\n    Object.keys(this.textsAnimations).forEach((key) => {\n      this.setAnimation(this.texts[key], this.textsAnimations[key])\n    })\n\n    // 背景动画\n    const bgAction = TweenMax.fromTo(this.bg, 1, { y: 0 }, { y: -this.scrollHeight })\n    const bgTimeline = new TimelineMax()\n    bgTimeline.add(bgAction, 0)\n    this.timeline.add(bgTimeline, 0)\n  }\n\n  // 动画对象\n  setAnimation (obj, animations) {\n    if (obj && animations && animations instanceof Array) {\n      animations.forEach(({ from, to, frames, infinite, frameRate, delay = 0, duration = 1 }) => {\n        if (frames) { // 帧动画\n          if (infinite) { // 无限\n            obj.frames = frames\n            obj.currentFrame = 0\n            this.aniIntervals.push(setInterval(() => {\n              obj.currentFrame += 1\n              if (obj.currentFrame >= obj.frames.length) obj.currentFrame = 0\n              const frame = obj.frames[obj.currentFrame]\n              obj.texture = PIXI.loader.resources[frame].texture\n            }, duration * 1000 / frameRate))\n          } else {\n            this.on('progress', (progress) => {\n              const frameProgress = (progress - delay) / duration\n              let index = Math.floor(frameProgress * frames.length)\n              if (index < frames.length && index >= 0) {\n                const frame = frames[index]\n                obj.texture = PIXI.loader.resources[frame].texture\n              }\n            })\n          }\n        } else if (from || to) { // 过渡动画\n          let action\n          if (from && to) {\n            action = TweenMax.fromTo(obj, duration, from, to)\n          } else if (to) {\n            action = TweenMax.to(obj, duration, to)\n          } else if (from) {\n            action = TweenMax.from(obj, duration, from)\n          }\n          const timeline = new TimelineMax({ delay })\n          timeline.add(action, 0)\n          timeline.play()\n          if (!(to && to.repeat === -1)) {\n            this.timeline.add(timeline, 0)\n          }\n        }\n      })\n    }\n  }\n\n  // ────────────────────────────────────────────────────────────────────────────────\n  // 滑动相关\n  // ────────────────────────────────────────────────────────────────────────────────\n  initTouch () {\n    const touchOptions = Object.assign({\n      touch: 'body'\n    }, this.options.touchOptions, {\n      min: -this.bg.height + this.height,\n      max: 0,\n      value: 0,\n      change: this.touchmove.bind(this)\n    })\n    this.alloyTouch = new AlloyTouch(touchOptions)\n  }\n\n  touchmove (value) {\n    // 总播放进度\n    this.progress = -value / this.scrollHeight\n    this.progress = this.progress < 0 ? 0 : this.progress\n    this.progress = this.progress > 1 ? 1 : this.progress\n    // 控制进度条\n    this.timeline.seek(this.progress)\n    // 触发事件\n    this.trigger('progress', this.progress)\n  }\n}\n\nexport default LongTake\n"]},"metadata":{},"sourceType":"module"}